1. Why did you choose the tools, libraries, and language you used for the coding exercise?

I chose Python because it is a language I'm proficient in and is widely used for backend development. The Flask framework is lightweight and suitable for building simple REST APIs quickly, allowing for clear and concise code, which is important for readability and maintainability.

For data storage, I used in-memory data structures (lists and dictionaries) because they eliminate external dependencies, making it easier for reviewers to run and test the application without needing to set up a database. While in a production environment, I would opt for a scalable database like MongoDB or PostgreSQL, using in-memory storage is appropriate for the scope of this coding challenge and ensures that the focus remains on the functionality and code quality.

2. What are the advantages and disadvantages of your solution?

Advantages:

Simplicity: The solution is straightforward and easy to understand.
Ease of Testing: Reviewers can run the application immediately without additional setup.
Focus on Code Quality: Allows the reviewers to focus on the logic and implementation.
No External Dependencies: Eliminates issues related to database installation and configuration.

Disadvantages:

Data Volatility: Data is lost when the application stops since it's stored in memory.
Scalability Limitations: In-memory storage isn't suitable for applications that need to persist data or handle large datasets.
Not Reflective of Production Environments: Doesn't demonstrate how the application would interact with a real database.


3. What has been a favorite school/personal project thus far? What about it challenged you? 

One of my favorite projects has been my work with Overture Games, where I engineered a Computer Vision RESTful API for Optical Music Recognition (OMR). This project blended my passion for both music and technology in a way that felt deeply meaningful.

The core challenge was to develop an API that could accurately convert scanned sheet music into machine-readable formats. Using Audiveris, I built a system to handle Optical Music Recognition, integrating it with Python scripting in Flask and a Node.js backend. The goal was ambitious—achieve high accuracy and efficiency in translating complex musical notations into a format that educators and students could easily use. I managed to achieve 92% accuracy, but the journey wasn’t without obstacles.

One of the major technical hurdles came when I had to ensure the platform could support a large user base without compromising performance. To address this, I deployed the website on an AWS EC2 Linux instance, using Nginx for load balancing and PM2 for process management. The site, sheetmusictomidi.com, now handles over 10,000 monthly users and has saved more than 40,000 hours of transcription work, which I’m incredibly proud of. However, scaling the API wasn’t as simple as setting up infrastructure; it required adhering to Agile practices to iteratively improve performance. I implemented automatic file cleanup and optimized storage management, ensuring the system could handle unlimited concurrent users seamlessly.

This project challenged me not just technically, but also in terms of problem-solving and balancing performance with user needs. It was a constant learning process, from refining the backend architecture to optimizing the user experience. It’s been a fulfilling journey, and the impact it’s had on musicians and educators keeps me motivated to keep improving it.